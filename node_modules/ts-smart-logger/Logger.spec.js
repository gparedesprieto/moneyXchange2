"use strict";
var LoggerFactory_1 = require('./LoggerFactory');
var LoggerLevelEnum_1 = require('./LoggerLevelEnum');
describe('Logger', function () {
    describe('Checking the default configuration', function () {
        it('Checking the payload logging', function () {
            var debugCalled = false, errorCalled = false;
            console.debug = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                expect(args[0]).toEqual(300);
                expect(args[1]).toEqual(300);
            };
            console.error = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                expect(args[0]).toEqual(600);
                expect(args[1]).toEqual(900);
            };
            var LoggedFirstClass = (function () {
                function LoggedFirstClass() {
                    this.logger = LoggerFactory_1.LoggerFactory.makeLogger(LoggedFirstClass);
                }
                LoggedFirstClass.prototype.logAtFirstClass = function () {
                    this.logger.debug(function (logger) {
                        debugCalled = true;
                        var i = 100 + 200;
                        logger.write(300, i);
                    });
                    this.logger.error(function (logger) {
                        errorCalled = true;
                        var i = 400 + 500;
                        logger.write(600, i);
                    });
                };
                return LoggedFirstClass;
            }());
            new LoggedFirstClass().logAtFirstClass();
            expect(debugCalled).toEqual(true);
            expect(errorCalled).toEqual(true);
        });
    });
    describe('Checking the custom configuration', function () {
        describe('Checking the debug log level', function () {
            it('Checking the payload logging', function () {
                var debugCalled = false, errorCalled = false;
                var LoggedFirstClass = (function () {
                    function LoggedFirstClass() {
                        this.logger = LoggerFactory_1.LoggerFactory.makeLogger(LoggedFirstClass);
                    }
                    LoggedFirstClass.prototype.logAtFirstClass = function () {
                        this.logger.debug(function (logger) {
                            debugCalled = true;
                        });
                        this.logger.error(function (logger) {
                            errorCalled = true;
                        });
                    };
                    return LoggedFirstClass;
                }());
                LoggerFactory_1.LoggerFactory.configure({
                    logLevel: LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL
                });
                new LoggedFirstClass().logAtFirstClass();
                expect(debugCalled).toEqual(true);
                expect(errorCalled).toEqual(true);
            });
        });
        describe('Checking the error log level', function () {
            it('Checking the payload logging', function () {
                var debugCalled = false, logCalled = false, errorCalled = false;
                var LoggedFirstClass = (function () {
                    function LoggedFirstClass() {
                        this.logger = LoggerFactory_1.LoggerFactory.makeLogger(LoggedFirstClass);
                    }
                    LoggedFirstClass.prototype.logAtFirstClass = function () {
                        this.logger.debug(function (logger) {
                            debugCalled = true;
                        });
                        this.logger.log(function (logger) {
                            logCalled = true;
                        });
                        this.logger.error(function (logger) {
                            errorCalled = true;
                        });
                    };
                    return LoggedFirstClass;
                }());
                LoggerFactory_1.LoggerFactory.configure({
                    logLevel: LoggerLevelEnum_1.LoggerLevelEnum.ERROR_LEVEL
                });
                new LoggedFirstClass().logAtFirstClass();
                expect(debugCalled).toEqual(false);
                expect(logCalled).toEqual(false);
                expect(errorCalled).toEqual(true);
            });
        });
    });
});
//# sourceMappingURL=Logger.spec.js.map