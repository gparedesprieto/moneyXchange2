import { ILogger } from './ILogger';
import { ILoggerConfig } from './ILoggerConfig';
import { LoggerLevelEnum } from './LoggerLevelEnum';
export declare const CONSOLE_DEBUG_FN: (message?: string, ...optionalParams: any[]) => void;
export declare const CONSOLE_INFO_FN: {
    (message?: any, ...optionalParams: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare const CONSOLE_NOTICE_FN: {
    (message?: any, ...optionalParams: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare const CONSOLE_WARN_FN: {
    (message?: any, ...optionalParams: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare const CONSOLE_ERROR_FN: {
    (message?: any, ...optionalParams: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare class LoggerFactory {
    private static config;
    static makeLogger(loggedClass?: string | Function): ILogger;
    /**
     * Configure the factory of the loggers. It's main method necessarily need to call the runtime.
     *
     * @param outerConfig ILoggerConfig
     */
    static configure(outerConfig?: {
        new (): ILoggerConfig;
    } | ILoggerConfig): void;
    /**
     * The level of logging. It can be called the runtime
     *
     * @param logLevel The level of logging
     */
    static configureLogLevel(logLevel: LoggerLevelEnum): void;
    /**
     * Saving the configuration in the local storage
     *
     * @param config Config
     */
    static storeConfig(config: ILoggerConfig): void;
    private static tryGetFromStorage();
    private static refreshEnvLoggersFunctions();
}
