"use strict";
var Logger_1 = require('./Logger');
var LoggerLevelEnum_1 = require('./LoggerLevelEnum');
var Utils_1 = require('./Utils');
var LOG_CONFIG_STORE_PARAMETER = "__logConfig", GLOBAL_LOGGER_FACTORY_PARAMETER = '$$LoggerFactory';
exports.CONSOLE_DEBUG_FN = console.debug;
exports.CONSOLE_INFO_FN = console.info;
exports.CONSOLE_NOTICE_FN = console.log;
exports.CONSOLE_WARN_FN = console.warn;
exports.CONSOLE_ERROR_FN = console.error;
var LoggerFactory = (function () {
    function LoggerFactory() {
    }
    LoggerFactory.makeLogger = function (loggedClass) {
        return new Logger_1.Logger(this.config).setLoggedClass(loggedClass);
    };
    /**
     * Configure the factory of the loggers. It's main method necessarily need to call the runtime.
     *
     * @param outerConfig ILoggerConfig
     */
    LoggerFactory.configure = function (outerConfig) {
        var storedLoggerConfig = this.tryGetFromStorage();
        // Formation of configuration based on the priority:
        //
        // The first priority: the config from localStorage
        // The second priority: the config from outer file
        // The third priority: the local config at current class
        this.config = Object.assign({ logLevel: LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL }, Utils_1.Utils.isFunction(outerConfig) ? new outerConfig() : outerConfig, storedLoggerConfig);
        this.refreshEnvLoggersFunctions();
    };
    /**
     * The level of logging. It can be called the runtime
     *
     * @param logLevel The level of logging
     */
    LoggerFactory.configureLogLevel = function (logLevel) {
        this.config.logLevel = logLevel;
        this.refreshEnvLoggersFunctions();
    };
    /**
     * Saving the configuration in the local storage
     *
     * @param config Config
     */
    LoggerFactory.storeConfig = function (config) {
        Utils_1.Utils.isPresent(localStorage) && localStorage.setItem(LOG_CONFIG_STORE_PARAMETER, JSON.stringify(config));
    };
    LoggerFactory.tryGetFromStorage = function () {
        try {
            return Utils_1.Utils.isPresent(localStorage) ? JSON.parse(localStorage.getItem(LOG_CONFIG_STORE_PARAMETER)) : null;
        }
        catch (e) {
            return null;
        }
    };
    LoggerFactory.refreshEnvLoggersFunctions = function () {
        console.debug =
            console.info =
                console.log =
                    console.warn =
                        console.error = (function () { });
        console.assert = console.assert || (function () { }); // It's for safe
        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.ERROR_LEVEL) {
            console.error = exports.CONSOLE_ERROR_FN;
        }
        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.WARN_LEVEL) {
            console.warn = exports.CONSOLE_WARN_FN;
        }
        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.NOTICE_LEVEL) {
            console.log = exports.CONSOLE_NOTICE_FN;
        }
        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.INFO_LEVEL) {
            console.info = exports.CONSOLE_INFO_FN;
        }
        if (this.config.logLevel >= LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL) {
            console.debug = exports.CONSOLE_DEBUG_FN || exports.CONSOLE_INFO_FN; // IE10 workaround
        }
    };
    LoggerFactory.config = { logLevel: LoggerLevelEnum_1.LoggerLevelEnum.DEBUG_LEVEL };
    return LoggerFactory;
}());
exports.LoggerFactory = LoggerFactory;
if (typeof window !== 'undefined') {
    window[GLOBAL_LOGGER_FACTORY_PARAMETER] = LoggerFactory;
}
//# sourceMappingURL=LoggerFactory.js.map